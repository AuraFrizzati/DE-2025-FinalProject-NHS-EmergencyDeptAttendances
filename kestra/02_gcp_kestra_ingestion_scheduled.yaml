id: 02_gcp_kestra_ingestion_scheduled
namespace: tutorial
description: |
  "Ingest NHS England A&E Attendances and Emergency Admissions
  https://www.england.nhs.uk/statistics/statistical-work-areas/ae-waiting-times-and-activity/""

# https://www.england.nhs.uk/statistics/wp-content/uploads/sites/2/2025/02/Monthly-AE-January-2025.csv

triggers:
  - id: monthly
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 0 15 * *"

variables:
  year: "{{trigger.date | date('yyyy')}}"
  month: "{{trigger.date | date('MM')}}"


tasks:  
  - id: extract_and_filter_csv
    type: io.kestra.plugin.scripts.python.Script
    outputFiles:
      - "*.csv"
    beforeCommands:
      - pip install pandas
      - pip install bs4
    script: |
        import pandas as pd
        import requests
        from bs4 import BeautifulSoup
        import re
        import calendar
        def get_financial_year(year: int, month: str) -> str:
          # Months in first quarter (January to March)
          first_quarter = ['January', 'February', 'March']
          # If month is in first quarter, financial year starts previous year
          start_year = year - 1 if month in first_quarter else year
          # Format as YYYY-YY
          end_year = str(start_year + 1)[-2:]
          return f"{start_year}-{end_year}"
        year = int("{{render(vars.year)}}")
        month = calendar.month_name[int("{{render(vars.month)}}")]
        print(year, month)
        financial_year = get_financial_year(year, month)
        url = f"https://www.england.nhs.uk/statistics/statistical-work-areas/ae-waiting-times-and-activity/ae-attendances-and-emergency-admissions-{financial_year}/"
        response = requests.get(url)
        #response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
        soup = BeautifulSoup(response.content, "html.parser")
        # Find all h3 tags, which contain the month and year
        h3_tags = soup.find_all("h3")
        # Method 2: Using string formatting with separate components
        pattern = fr"{month}" + r"\s+\d{4}"
        for h3_tag in h3_tags:
          # Extract the text from the h3 tag
          header_text = h3_tag.text.strip()
          # Check if the header matches the desired format (e.g., "January 2025")
          if re.match(pattern, header_text):
              # Find the corresponding CSV link
              csv_link = h3_tag.find_next_sibling("p").find("a", href=lambda href: href and href.endswith(".csv"))
              csv_url = csv_link["href"]

        print(f"the csv url is: {csv_url}")
        df = pd.read_csv(csv_url)
        # Filter out rows where 'Period' column contains the word 'Total'
        df_filtered = df[~df['Period'].str.contains('Total', case=False, na=False)]
        # drop completely empty columns
        df_filtered = df_filtered.dropna(axis=1, how='all')
        # Save the filtered CSV
        year_month = str(year)+"-"+month
        csv_name = "filtered_output.csv"
        df_filtered.to_csv(csv_name, index=False)

  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{outputs.extract_and_filter_csv.outputFiles['filtered_output.csv']}}"
    to: "gs://{{kv('GCP_BUCKET_NAME')}}/Monthly-AE-{{render(vars.month)}}-{{render(vars.year)}}.csv"

  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      month: "{{render(vars.month)}}"
      year: "{{render(vars.year)}}"

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: To avoid cluttering your storage, we will remove the downloaded files

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"